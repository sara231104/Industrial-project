# -*- coding: utf-8 -*-
"""ragas_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1roSMcOEDlZdCG8Lp64hAS_owpOJjh6Bn
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
sanjanasatish68l_carnatic_ragas_with_features_path = kagglehub.dataset_download('sanjanasatish68l/carnatic-ragas-with-features')

print('Data source import complete.')

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import plotly.io as pio
import plotly.express as px
import plotly.graph_objects as go

from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

!pip install --quiet lazypredict
from lazypredict.Supervised import LazyClassifier

!pip install --quiet kneed
from kneed import KneeLocator

import warnings
warnings.filterwarnings('ignore')

from google.colab import files
uploaded = files.upload()  # Choose your 'archive (1).zip' file from your computer

import zipfile
import os

zip_path = 'archive (1).zip'  # your uploaded zip filename
extract_dir = './extracted_data'

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_dir)

print("Files extracted:", os.listdir(extract_dir))

import pandas as pd

# List all CSV files extracted
csv_files = [f for f in os.listdir(extract_dir) if f.endswith('.csv')]
print("CSV files found:", csv_files)

# Load the first CSV file found
dataset_path = os.path.join(extract_dir, csv_files[0])
ragas = pd.read_csv(dataset_path)

print(ragas.head())

print(ragas.head())

ragas = ragas.iloc[:, 2:]
ragas = ragas.rename(columns = {'raga': 'Label'})
ragas

from sklearn.decomposition import PCA
import pandas as pd

class PCAFeatureReducer:
    def __init__(self, dataframe, target_column, n_components=3):
        self.dataframe = dataframe
        self.target_column = target_column
        self.n_components = n_components
        self.pca = PCA(n_components=self.n_components)
        self.pca_df = None

    def transform(self):
        features = self.dataframe.drop(columns=self.target_column)
        pca_result = self.pca.fit_transform(features)

        # Create a new DataFrame for PCA components
        columns = [f'X{i + 1}' for i in range(self.n_components)]
        self.pca_df = pd.DataFrame(data=pca_result, columns=columns)

        # Append the label column
        self.pca_df[self.target_column] = self.dataframe[self.target_column]
        return self.pca_df

from sklearn.model_selection import train_test_split
from lazypredict.Supervised import LazyClassifier

class RagaLabeler:
    def __init__(self, data, features_for_classification, test_size=0.2, random_state=42):
        self.data = data
        self.features_for_classification = features_for_classification
        self.test_size = test_size
        self.random_state = random_state

        self.features = self.data.drop(self.features_for_classification, axis=1)
        self.targets = self.data[self.features_for_classification]

        self.features_train, self.features_test, self.targets_train, self.targets_test = train_test_split(
            self.features, self.targets,
            test_size=self.test_size,
            random_state=self.random_state,
            stratify=self.targets
        )

        self.lazyClassifier = LazyClassifier(verbose=0, ignore_warnings=True, custom_metric=None)
        self.models = None
        self.predictions = None

    def fit(self):
        self.models, self.predictions = self.lazyClassifier.fit(
            self.features_train, self.features_test,
            self.targets_train, self.targets_test
        )

    def get_models(self):
        return self.models

    def get_predictions(self):
        return self.predictions

pca_reducer = PCAFeatureReducer(ragas, target_column='Label', n_components=3)
reduced_df = pca_reducer.transform()

labeler = RagaLabeler(reduced_df, features_for_classification=['Label'], test_size=0.2)
labeler.fit()

print(labeler.get_models())